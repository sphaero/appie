#!/usr/bin/python3
# 
# Copyright (c) 2015, Arnaud Loonstra, All rights reserved.
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 3.0 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License v3 for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library.

import argparse
import appie
import logging
import sys
import importlib

def str_to_class(class_path):
    module_name, class_name = class_path.rsplit('.', 1)
    try:
        module_ = importlib.import_module(module_name)
        try:
            class_ = getattr(module_, class_name)()
        except AttributeError:
            logging.error('Class does not exist')
            sys.exit(1)
    except ImportError as e:
        logging.error('Module does not exist: {0}'.format(e))
        sys.exit(1)
    return class_


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Appie Static HTML generator for dynamic websites')
    parser.add_argument('-s','--source', help='directory with source files, directories are processed in the order they are given', action="append", required=True)
    parser.add_argument('-t','--target', help='path to where the files will be generated', default="./build", required=False)
    parser.add_argument('-w','--www', help='after generating serve the files through a http server ', default=False, required=False, action='store_true')
    parser.add_argument('-p','--port', help='port for the http server', default=8000, type=int, required=False)
    parser.add_argument('-f','--file-ext', nargs='*', help="file parser extensions to add to appie (LIFO order)", default=[])
    parser.add_argument('-d','--dir-ext', nargs='*', help="directory parser extensions to add to appie (LIFO order)", default=[])
    parser.add_argument('-v','--verbose', help="verbose output", default=False, required=False, action='store_true')
    args = vars(parser.parse_args())
    #print(args.get('file_ext'), args)
    #sys.exit(0)
    appie.config['src'] = args.get('source')
    appie.config['target'] = args.get('target')
    appie.config['verbose'] = args.get('verbose')
    if appie.config['verbose']:
        logging.basicConfig(level=logging.DEBUG)
    a = appie.Appie()
    for p in args.get('file_ext', []):
        instance = str_to_class(p)
        a.add_file_parser(instance)
    for p in args.get('dir_ext', []):
        instance = str_to_class(p)
        a.add_directory_parser(instance)

    a.parse()

    # serve files if requested
    if args.get('www'):
        import http.server
        import socketserver
        import os
        import select
        import pyinotify
        import fcntl
        import os
        import array
        import struct
        import pyinotify
        import termios
        
        # setup inotify
        i = pyinotify.INotifyWrapper.create()
        ifd = i._inotify_init()
        # add src directory to watch
        # TODO add all sources
        iwd = i.inotify_add_watch(ifd, appie.config['src'][0], \
                    pyinotify.IN_DELETE | pyinotify.IN_CLOSE_WRITE \
                    | pyinotify.IN_MOVED_FROM | pyinotify.IN_MOVED_TO )

        # setup http server
        cwd = os.getcwd()
        os.chdir(appie.config['target'])
        PORT = args.get('port')
        Handler = http.server.SimpleHTTPRequestHandler
        httpd = socketserver.TCPServer(("", PORT), Handler)
        
        def handle_inotify():
            buf = array.array('i', [0])
            if fcntl.ioctl(ifd, termios.FIONREAD, buf, 1) == -1: # get length of buffer
                logger.error('some ioctl -1 error')
                running = False
                return
            length = buf[0]
            # read data
            # todo we should loop over the data!
            recv = os.read(ifd, length)
            print("handle_inotify: recveived length {0}".format(len(recv)))
            rwd, evmask, cookie, data_length = struct.unpack('iIII', recv[0:16])
            if rwd != iwd:
                print("watch descriptor doesn't match: %d is not %d" %(rwd, iwd))
                return
            data, = struct.unpack('%ds' %data_length, recv[16:length])
            # since data is a string this is a hack to remove the null bytes
            data = data.partition(b'\0')
            if data[0]:
                print("Appie reparsing")
                os.chdir(cwd)   # back to original working dir
                a.parse()
                os.chdir(appie.config['target']) # to http root dir

        print("Serving on port {0}...     press CTRL-C to quit".format(PORT))
        # Serve until process is killed
        #httpd.__is_shut_down.clear()
        try:
            while not httpd._BaseServer__shutdown_request:
                r,w,e = select.select( [httpd, ifd], [], [], 1.)
                if httpd in r:
                    httpd._handle_request_noblock()
                if ifd in r:
                    handle_inotify()
                    
        except (KeyboardInterrupt, SystemExit):
            print("\n")
        finally:
            httpd._BaseServer__shutdown_request = False
            #httpd.__is_shut_down.set()
